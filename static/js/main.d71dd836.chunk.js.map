{"version":3,"sources":["styles.js","components/Node.js","global-context.js","components/Grid.js","hooks.js","App.js","serviceWorker.js","index.js"],"names":["colors","StyledGridKeys","styled","p","props","color","Node","this","isStartNode","isFinishNode","isFrontierNode","hasBeenVisited","isPath","isWall","nodeSize","style","background","height","width","display","border","React","Component","GlobalContext","createContext","GlobalContextProvider","Provider","Consumer","Grid","visualizeBFS","a","frontier","cameFrom","current","getNeighbors","node","neighbors","get","state","grid","row","col","push","sleep","milliseconds","Promise","resolve","setTimeout","foundEarly","start","context","startNodeRow","startNodeCol","id","process","shift","copyCur","copyGrid","setState","copyNode","finishNodeRow","finishNodeCol","length","isScanning","path","backtrackCurrent","isEqual","console","log","pathDoesExist","copyState","temp","pop","visualizeDFS","visualizeAstar","heuristic","finish","cur","Math","abs","sort","x","y","value","resetTraversal","buildGrid","getNodeSize","screenDimensions","resetAll","window","location","reload","currentRow","nodeData","wall","randomWalls","find","Infinity","map","idx","cell","cellIdx","wallCell","className","margin","onClick","src","contextType","useWindowSize","isClient","getSize","innerWidth","undefined","innerHeight","useState","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","App","getRandomInt","max","floor","random","walls","i","filter","global","padding","paddingTop","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d71dd836.chunk.js","sourcesContent":["import styled  from 'styled-components';\n\nexport const colors = {\n\tisStartNode: '#5b58f5',\n\tisFinishNode: '#ff5757',\n\tisWall: '#6e6e6e',\n\tisPath: '#b5f558',\n\tisFrontierNode: '#fcb6bf',\n\thasBeenVisited: '#5592d9',\n\tdefault: '#ededed'\n};\n\n\nexport const StyledGridKeys = styled.p`\nborder-radius: 15px;\nborder: white solid thick;\ncolor: white;\npadding: 10px;\nfont-weight: 700px;\nfont-size: 1.5vw;\nbackground: ${props => props.color};\n`\n","import React from 'react';\nimport {colors} from '../styles'\n\nclass Node extends React.Component {\n\trender() {\n\t\tconst { isStartNode, isFinishNode, isFrontierNode, hasBeenVisited, isPath, isWall, nodeSize } = this.props;\n\t\tconst bg = () => {\n\t\t\tif (isStartNode) return colors.isStartNode;\n            if (isFinishNode) return colors.isFinishNode;\n\t\t\tif(isWall) return colors.isWall\n\t\t\tif(isPath) return colors.isPath\n            if(isFrontierNode) return colors.isFrontierNode\n\t\t\tif(hasBeenVisited) return colors.hasBeenVisited\n\t\t\telse return colors.default\n\t\t};\n\n\t\treturn <div style={{ background: bg(), height: nodeSize, width: nodeSize, display: 'inline-block', border:'none' }}> &nbsp;</div>;\n\t}\n}\n\nexport default Node;\n","import React from 'react'\n\nconst GlobalContext = React.createContext()\n\nexport const GlobalContextProvider = GlobalContext.Provider\nexport const GlobalContextConsumer = GlobalContext.Consumer\n\nexport default GlobalContext","import React from 'react';\nimport Node from './Node';\nimport { get, isEqual } from 'lodash';\nimport GlobalContext from '../global-context';\n\nclass Grid extends React.Component {\n\tstatic contextType = GlobalContext;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tgrid: [],\n\t\t\tisScanning: false,\n\t\t\tpathDoesExist: true\n\t\t};\n\t}\n\n\t// Init the grid\n\tcomponentDidMount() {\n\t\tlet grid = this.buildGrid();\n\t\tthis.setState({ grid: grid });\n\t}\n\n\tvisualizeBFS = async () => {\n\t\tlet frontier = [];\n\t\tlet cameFrom = {};\n\t\tlet current = null;\n\t\t// returns an array of valid neighbors\n\t\tconst getNeighbors = (node) => {\n\t\t\tlet neighbors = [];\n\t\t\t// check above\n\t\t\tget(this.state.grid, `[${node.row - 1}][${node.col}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row - 1}][${node.col}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row - 1}][${node.col}]`));\n\t\t\t// check below\n\t\t\tget(this.state.grid, `[${node.row + 1}][${node.col}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row + 1}][${node.col}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row + 1}][${node.col}]`));\n\t\t\t// check right\n\t\t\tget(this.state.grid, `[${node.row}][${node.col + 1}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row}][${node.col + 1}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row}][${node.col + 1}]`));\n\t\t\t// check left\n\t\t\tget(this.state.grid, `[${node.row}][${node.col - 1}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row}][${node.col - 1}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row}][${node.col - 1}]`));\n\t\t\t// return an array of neighbors\n\t\t\treturn neighbors;\n\t\t};\n\n\t\tconst sleep = (milliseconds) => {\n\t\t\treturn new Promise((resolve) => setTimeout(resolve, milliseconds));\n\t\t};\n\n\t\tlet foundEarly = false;\n\n\t\t// Breadth First Search\n\t\tlet start = this.state.grid[this.context.startNodeRow][this.context.startNodeCol];\n\t\tfrontier.push(start);\n\t\tcameFrom[start.id] = null;\n\t\tconst process = async () => {\n\t\t\tcurrent = frontier.shift();\n\t\t\tlet copyCur = current;\n\t\t\tcopyCur.isFrontierNode = false;\n\t\t\tlet copyGrid = [ ...this.state.grid ];\n\t\t\tcopyGrid[copyCur.row][copyCur.col] = copyCur;\n\t\t\tthis.setState({ copyGrid });\n\t\t\tfor (let node of getNeighbors(current)) {\n\t\t\t\tif (!cameFrom[node.id]) {\n\t\t\t\t\tlet copyNode = node;\n\t\t\t\t\tfrontier.push(node); //  put into frontier array\n\t\t\t\t\tcameFrom[node.id] = current; // visited[node] = true\n\t\t\t\t\tcopyNode.isFrontierNode = true;\n\t\t\t\t\tcopyNode.hasBeenVisited = true;\n\t\t\t\t\tlet copyGrid = [ ...this.state.grid ];\n\t\t\t\t\tcopyGrid[copyNode.row][copyNode.col] = copyNode;\n\t\t\t\t\tthis.setState({ copyGrid });\n\t\t\t\t\tif (copyNode.id === `row-${this.context.finishNodeRow}-col-${this.context.finishNodeCol}`)\n\t\t\t\t\t\tfoundEarly = true; // early exit\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Run one interation per every 10 ms\n\t\twhile (frontier.length > 0 && !foundEarly) {\n\t\t\tthis.setState({ isScanning: true });\n\t\t\tprocess();\n\t\t\tawait sleep(0.5);\n\t\t}\n\t\t// draw path\n\t\tlet path = [];\n\t\tlet backtrackCurrent = this.state.grid[this.context.finishNodeRow][this.context.finishNodeCol];\n\t\twhile (\n\t\t\tbacktrackCurrent &&\n\t\t\t!isEqual(backtrackCurrent, this.state.grid[this.context.startNodeRow][this.context.startNodeCol])\n\t\t) {\n\t\t\tpath.push(backtrackCurrent);\n\t\t\tbacktrackCurrent = cameFrom[backtrackCurrent.id];\n\t\t\tif (!backtrackCurrent) {\n\t\t\t\tthis.setState({ isScanning: false });\n\t\t\t\tconsole.log('no path found');\n\t\t\t\tthis.setState({ pathDoesExist: false });\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.setState({ isScanning: false });\n\n\t\tlet copyState = [ ...this.state.grid ];\n\t\twhile (path.length !== 0) {\n\t\t\tlet temp = path.pop();\n\t\t\tcopyState[temp.row][temp.col].isPath = true;\n\t\t}\n\n\t\tthis.setState({ copyState });\n\t};\n\n\tvisualizeDFS = async () => {\n\t\tlet frontier = [];\n\t\tlet cameFrom = {};\n\t\tlet current = null;\n\t\t// returns an array of valid neighbors\n\t\tconst getNeighbors = (node) => {\n\t\t\tlet neighbors = [];\n\t\t\t// check above\n\t\t\tget(this.state.grid, `[${node.row - 1}][${node.col}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row - 1}][${node.col}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row - 1}][${node.col}]`));\n\t\t\t// check below\n\t\t\tget(this.state.grid, `[${node.row + 1}][${node.col}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row + 1}][${node.col}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row + 1}][${node.col}]`));\n\t\t\t// check right\n\t\t\tget(this.state.grid, `[${node.row}][${node.col + 1}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row}][${node.col + 1}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row}][${node.col + 1}]`));\n\t\t\t// check left\n\t\t\tget(this.state.grid, `[${node.row}][${node.col - 1}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row}][${node.col - 1}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row}][${node.col - 1}]`));\n\t\t\t// return an array of neighbors\n\t\t\treturn neighbors;\n\t\t};\n\n\t\tconst sleep = (milliseconds) => {\n\t\t\treturn new Promise((resolve) => setTimeout(resolve, milliseconds));\n\t\t};\n\n\t\tlet foundEarly = false;\n\n\t\t// Depth First Search\n\t\tlet start = this.state.grid[this.context.startNodeRow][this.context.startNodeCol];\n\t\tfrontier.push(start);\n\t\tcameFrom[start.id] = null;\n\t\tconst process = async () => {\n\t\t\tcurrent = frontier.pop();\n\t\t\tlet copyCur = current;\n\t\t\tcopyCur.isFrontierNode = false;\n\t\t\tlet copyGrid = [ ...this.state.grid ];\n\t\t\tcopyGrid[copyCur.row][copyCur.col] = copyCur;\n\t\t\tthis.setState({ copyGrid });\n\t\t\tfor (let node of getNeighbors(current)) {\n\t\t\t\tif (!cameFrom[node.id]) {\n\t\t\t\t\tlet copyNode = node;\n\t\t\t\t\tfrontier.push(node); //  put into frontier array\n\t\t\t\t\tcameFrom[node.id] = current; // visited[node] = true\n\t\t\t\t\tcopyNode.isFrontierNode = true;\n\t\t\t\t\tcopyNode.hasBeenVisited = true;\n\t\t\t\t\tlet copyGrid = [ ...this.state.grid ];\n\t\t\t\t\tcopyGrid[copyNode.row][copyNode.col] = copyNode;\n\t\t\t\t\tthis.setState({ copyGrid });\n\t\t\t\t\tif (copyNode.id === `row-${this.context.finishNodeRow}-col-${this.context.finishNodeCol}`)\n\t\t\t\t\t\tfoundEarly = true; // early exit\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Run one interation per every 10 ms\n\t\twhile (frontier.length > 0 && !foundEarly) {\n\t\t\tthis.setState({ isScanning: true });\n\t\t\tprocess();\n\t\t\tawait sleep(0.5);\n\t\t}\n\t\t// draw path\n\t\tlet path = [];\n\t\tlet backtrackCurrent = this.state.grid[this.context.finishNodeRow][this.context.finishNodeCol];\n\t\twhile (\n\t\t\tbacktrackCurrent &&\n\t\t\t!isEqual(backtrackCurrent, this.state.grid[this.context.startNodeRow][this.context.startNodeCol])\n\t\t) {\n\t\t\tpath.push(backtrackCurrent);\n\t\t\tbacktrackCurrent = cameFrom[backtrackCurrent.id];\n\t\t\tif (!backtrackCurrent) {\n\t\t\t\tconsole.log('no path found');\n\t\t\t\tthis.setState({ pathDoesExist: false });\n\t\t\t\tthis.setState({ isScanning: false });\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.setState({ isScanning: false });\n\n\t\tlet copyState = [ ...this.state.grid ];\n\t\twhile (path.length !== 0) {\n\t\t\tlet temp = path.pop();\n\t\t\tcopyState[temp.row][temp.col].isPath = true;\n\t\t}\n\n\t\tthis.setState({ copyState });\n\t};\n\n\tvisualizeAstar = async () => {\n\t\tlet frontier = [];\n\t\tlet cameFrom = {};\n\t\tlet queue = {};\n\t\tlet current = null;\n\t\t// returns an array of valid neighbors\n\t\tconst getNeighbors = (node) => {\n\t\t\tlet neighbors = [];\n\t\t\t// check above\n\t\t\tget(this.state.grid, `[${node.row - 1}][${node.col}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row - 1}][${node.col}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row - 1}][${node.col}]`));\n\t\t\t// check below\n\t\t\tget(this.state.grid, `[${node.row + 1}][${node.col}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row + 1}][${node.col}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row + 1}][${node.col}]`));\n\t\t\t// check right\n\t\t\tget(this.state.grid, `[${node.row}][${node.col + 1}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row}][${node.col + 1}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row}][${node.col + 1}]`));\n\t\t\t// check left\n\t\t\tget(this.state.grid, `[${node.row}][${node.col - 1}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row}][${node.col - 1}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row}][${node.col - 1}]`));\n\t\t\t// return an array of neighbors\n\t\t\treturn neighbors;\n\t\t};\n\n\t\tconst sleep = (milliseconds) => {\n\t\t\treturn new Promise((resolve) => setTimeout(resolve, milliseconds));\n\t\t};\n\n\t\tconst heuristic = (finish, cur) => {\n\t\t\t// Manhattan distance on a square grid\n\t\t\treturn Math.abs(finish.row - cur.row) + Math.abs(finish.col - cur.col);\n\t\t};\n\n\t\tlet foundEarly = false;\n\n\t\t// A* star search\n\t\tlet start = this.state.grid[this.context.startNodeRow][this.context.startNodeCol];\n\t\tfrontier.push(start);\n\t\tcameFrom[start.id] = null;\n\t\tconst process = async () => {\n\t\t\tfrontier.sort((x, y) => x.value - y.value);\n\t\t\tcurrent = frontier.shift();\n\t\t\tlet copyCur = current;\n\t\t\tcopyCur.isFrontierNode = false;\n\t\t\tlet copyGrid = [ ...this.state.grid ];\n\t\t\tcopyGrid[copyCur.row][copyCur.col] = copyCur;\n\t\t\tthis.setState({ copyGrid });\n\t\t\tfor (let node of getNeighbors(current)) {\n\t\t\t\tif (!cameFrom[node.id]) {\n\t\t\t\t\tlet copyNode = node;\n\t\t\t\t\tfrontier.push(node); //  put into frontier array\n\t\t\t\t\tcameFrom[node.id] = current; // visited[node] = true\n\t\t\t\t\tcopyNode.isFrontierNode = true;\n\t\t\t\t\tcopyNode.hasBeenVisited = true;\n\t\t\t\t\tcopyNode.value = heuristic(\n\t\t\t\t\t\tthis.state.grid[this.context.finishNodeRow][this.context.finishNodeCol],\n\t\t\t\t\t\tcopyNode\n\t\t\t\t\t); // update value\n\t\t\t\t\tlet copyGrid = [ ...this.state.grid ];\n\t\t\t\t\tcopyGrid[copyNode.row][copyNode.col] = copyNode;\n\t\t\t\t\tthis.setState({ copyGrid });\n\t\t\t\t\tif (copyNode.id === `row-${this.context.finishNodeRow}-col-${this.context.finishNodeCol}`)\n\t\t\t\t\t\tfoundEarly = true; // early exit\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Run one interation per every 10 ms\n\t\twhile (frontier.length > 0 && !foundEarly) {\n\t\t\tthis.setState({ isScanning: true });\n\t\t\tprocess();\n\t\t\tawait sleep(0.5);\n\t\t}\n\t\t// draw path\n\t\tlet path = [];\n\t\tlet backtrackCurrent = this.state.grid[this.context.finishNodeRow][this.context.finishNodeCol];\n\t\twhile (\n\t\t\tbacktrackCurrent &&\n\t\t\t!isEqual(backtrackCurrent, this.state.grid[this.context.startNodeRow][this.context.startNodeCol])\n\t\t) {\n\t\t\tpath.push(backtrackCurrent);\n\t\t\tbacktrackCurrent = cameFrom[backtrackCurrent.id];\n\t\t\tif (!backtrackCurrent) {\n\t\t\t\tthis.setState({ isScanning: false });\n\t\t\t\tconsole.log('no path found');\n\t\t\t\tthis.setState({ pathDoesExist: false });\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.setState({ isScanning: false });\n\n\t\tlet copyState = [ ...this.state.grid ];\n\t\twhile (path.length !== 0) {\n\t\t\tlet temp = path.pop();\n\t\t\tcopyState[temp.row][temp.col].isPath = true;\n\t\t}\n\n\t\tthis.setState({ copyState });\n\t};\n\n\t// Reset button\n\tresetTraversal = () => {\n\t\tlet grid = this.buildGrid();\n\t\tthis.setState({ grid: grid, pathDoesExist: true });\n\t};\n\n\t// TODO: move this styles logic into styled-component. styles logic doesnt belong here\n\tgetNodeSize = () => {\n\t\tif (this.props.screenDimensions.width >= 1100) return '2vw';\n\t\telse return '3.5vw';\n\t};\n\n\tresetAll = () => {\n\t\twindow.location.reload(false);\n\t};\n\n\t// TODO - Put both into different files\n\t// Grid Utils\n\tbuildGrid = () => {\n\t\tlet grid = [];\n\t\tfor (let row = 0; row < 15; row++) {\n\t\t\tlet currentRow = [];\n\t\t\tfor (let col = 0; col < 25; col++) {\n\t\t\t\tcurrentRow.push(this.nodeData(row, col));\n\t\t\t}\n\t\t\tgrid.push(currentRow);\n\t\t}\n\n\t\treturn grid;\n\t};\n\n\t// object representing a Node\n\tnodeData = (row, col) => {\n\t\tconst wall = this.context.randomWalls.find((x) => isEqual([ row, col ], x));\n\t\treturn {\n\t\t\tid: `row-${row}-col-${col}`,\n\t\t\trow: row,\n\t\t\tcol: col,\n\t\t\tisStartNode: row === this.context.startNodeRow && col === this.context.startNodeCol,\n\t\t\tisFinishNode: row === this.context.finishNodeRow && col === this.context.finishNodeCol,\n\t\t\tisFrontierNode: false,\n\t\t\tisWall: wall,\n\t\t\tisPath: false,\n\t\t\thasBeenVisited: false,\n\t\t\tvalue: row === this.context.startNodeRow && col === this.context.startNodeCol ? 0 : Infinity\n\t\t};\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<br />\n\t\t\t\t{this.state.grid.map((row, idx) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div style={{ height: this.getNodeSize() }}>\n\t\t\t\t\t\t\t{row.map((cell, cellIdx) => {\n\t\t\t\t\t\t\t\tconst wall = this.context.randomWalls.find((wallCell) => {\n\t\t\t\t\t\t\t\t\treturn wallCell[0] === cell.row && wallCell[1] === cell.col;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<Node\n\t\t\t\t\t\t\t\t\t\tid={`row-${idx}-col-${cellIdx}`}\n\t\t\t\t\t\t\t\t\t\tisStartNode={cell.isStartNode}\n\t\t\t\t\t\t\t\t\t\tisFinishNode={cell.isFinishNode}\n\t\t\t\t\t\t\t\t\t\tisFrontierNode={cell.isFrontierNode}\n\t\t\t\t\t\t\t\t\t\thasBeenVisited={cell.hasBeenVisited}\n\t\t\t\t\t\t\t\t\t\tisWall={!!wall}\n\t\t\t\t\t\t\t\t\t\tisPath={cell.isPath}\n\t\t\t\t\t\t\t\t\t\tnodeSize={this.getNodeSize()}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t\t<br />\n\t\t\t\t<button className=\"button-xlarge pure-button\" style={{ margin: 10 }} onClick={this.visualizeBFS}>\n\t\t\t\t\tBFS\n\t\t\t\t</button>\n\t\t\t\t<button className=\"button-xlarge pure-button\" style={{ margin: 10 }} onClick={this.visualizeDFS}>\n\t\t\t\t\tDFS\n\t\t\t\t</button>\n\t\t\t\t<button className=\"button-xlarge pure-button\" style={{ margin: 10 }} onClick={this.visualizeAstar}>\n\t\t\t\t\tAStar\n\t\t\t\t</button>\n\t\t\t\t<div>\n\t\t\t\t\t<button className=\"pure-button\" onClick={this.resetAll}>\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tstyle={{ height: 20, width: 20 }}\n\t\t\t\t\t\t\tsrc=\"https://img.icons8.com/windows/32/000000/refresh.png\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className=\"button-xlarge pure-button\" style={{ margin: 10 }} onClick={this.resetTraversal}>\n\t\t\t\t\t\t<strong>Reset Traversal</strong>\n\t\t\t\t\t</button>\n\t\t\t\t\t{this.state.isScanning && 'Scanning...'}\n\t\t\t\t\t{!this.state.pathDoesExist && 'Path does not exist :('}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Grid;\n","import React, {useEffect, useState} from 'react';\n\nexport \tfunction useWindowSize() {\n    const isClient = typeof window === 'object';\n\n    function getSize() {\n        return {\n            width: isClient ? window.innerWidth : undefined,\n            height: isClient ? window.innerHeight : undefined\n        };\n    }\n\n    const [ windowSize, setWindowSize ] = useState(getSize);\n\n    useEffect(() => {\n        if (!isClient) {\n            return false;\n        }\n\n        function handleResize() {\n            setWindowSize(getSize());\n        }\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []); // Empty array ensures that effect is only run on mount and unmount\n\n    return windowSize;\n}","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Grid from './components/Grid';\nimport { useWindowSize } from './hooks';\nimport { GlobalContextProvider } from './global-context';\nimport { isEqual } from 'lodash';\nimport { StyledGridKeys } from './styles';\nimport {colors } from './styles'\n\nfunction App() {\n\tconst startNodeRow = getRandomInt(14);\n\tconst startNodeCol = getRandomInt(25);\n\tconst finishNodeRow = getRandomInt(14);\n\tconst finishNodeCol = getRandomInt(25);\n\n\tfunction getRandomInt(max) {\n\t\treturn Math.floor(Math.random() * Math.floor(max));\n\t}\n\n\tlet walls = [];\n\tfor (let i = 0; i < 150; i++) {\n\t\twalls.push([ getRandomInt(14), getRandomInt(25) ]);\n\t}\n\n\t// make sure wall node doesn't overlap with finishNode\n\tconst randomWalls = walls.filter((x) => !isEqual(x, [ finishNodeRow, finishNodeCol ]));\n\tconst global = { startNodeRow, startNodeCol, finishNodeRow, finishNodeCol, randomWalls };\n\treturn (\n\t\t<GlobalContextProvider value={global}>\n\t\t\t<div className=\"App\">\n\t\t\t\t<br />\n\t\t\t\t<div className=\"container\" style={{ padding: '5vw', paddingTop: '1vh' }}>\n\t\t\t\t\t<h1>PATH FINDING VISUALIZER</h1>\n\t\t\t\t\t<div className=\"pure-g\" style={{ margin: 10 }}>\n\t\t\t\t\t\t<div className=\"pure-u-1-6\">\n\t\t\t\t\t\t\t<StyledGridKeys color={colors.isStartNode}>Start</StyledGridKeys>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"pure-u-1-6\">\n\t\t\t\t\t\t\t<StyledGridKeys color={colors.isFinishNode}>Finish</StyledGridKeys>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"pure-u-1-6\">\n\t\t\t\t\t\t\t<StyledGridKeys color={colors.isWall}>Walls</StyledGridKeys>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"pure-u-1-6\">\n\t\t\t\t\t\t\t<StyledGridKeys color={colors.isPath}>Path</StyledGridKeys>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"pure-u-1-6\">\n\t\t\t\t\t\t\t<StyledGridKeys color={colors.isFrontierNode}>Frontier</StyledGridKeys>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"pure-u-1-6\">\n\t\t\t\t\t\t\t<StyledGridKeys color={colors.hasBeenVisited}>Visited</StyledGridKeys>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<Grid screenDimensions={useWindowSize()} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</GlobalContextProvider>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}