{"version":3,"sources":["components/Node.js","components/Grid.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","isStartNode","isFinishNode","isFrontierNode","hasBeenVisited","isPath","isWall","style","background","height","width","display","border","React","Component","startNodeRow","getRandomInt","startNodeCol","finishNodeRow","finishNodeCol","max","Math","floor","random","walls","i","push","randomWalls","filter","x","isEqual","Grid","visualizeBFS","a","frontier","cameFrom","current","getNeighbors","node","neighbors","get","state","grid","row","col","sleep","milliseconds","Promise","resolve","setTimeout","foundEarly","start","id","process","shift","copyCur","copyGrid","setState","copyNode","length","path","backtrackCurrent","console","log","copyState","temp","pop","visualizeDFS","visualizeAstar","heuristic","finish","cur","abs","sort","y","value","bind","buildGrid","map","idx","cell","cellIdx","wall","find","wallCell","className","margin","onClick","currentRow","nodeData","Infinity","App","padding","paddingTop","borderRadius","color","fontWeight","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2fb0aeea.chunk.js","sourcesContent":["import React from 'react';\n\nclass Node extends React.Component {\n\trender() {\n\t\tconst { isStartNode, isFinishNode, isFrontierNode, hasBeenVisited, isPath, isWall } = this.props;\n\t\tconst bg = () => {\n\t\t\tif (isStartNode) return '#5b58f5';\n            if (isFinishNode) return '#ff5757';\n\t\t\tif(isWall) return '#6e6e6e'\n\t\t\tif(isPath) return '#b5f558'\n            if(isFrontierNode) return '#fcb6bf'\n\t\t\tif(hasBeenVisited) return '#5592d9'\n\t\t\telse return '#ededed'\n\t\t};\n\n\t\treturn <div style={{ background: bg(), height: '2vw', width: '2vw', display: 'inline-block', border:'none' }}> &nbsp;</div>;\n\t}\n}\n\nexport default Node;\n","import React from 'react';\nimport Node from './Node';\nimport { get, isEqual } from 'lodash';\n\nconst startNodeRow = getRandomInt(14);\nconst startNodeCol = getRandomInt(25);\nconst finishNodeRow = getRandomInt(14);\nconst finishNodeCol = getRandomInt(25);\n\nfunction getRandomInt(max) {\n\treturn Math.floor(Math.random() * Math.floor(max));\n}\n\nlet walls = [];\nfor (let i = 0; i < 150; i++) {\n\twalls.push([ getRandomInt(14), getRandomInt(25) ]);\n}\n\n// make sure wall node doesn't overlap with finishNode\nconst randomWalls = walls.filter((x) => !isEqual(x, [ finishNodeRow, finishNodeCol ]));\n\nclass Grid extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tgrid: []\n\t\t};\n\t\tthis.visualizeBFS = this.visualizeBFS.bind(this);\n\t\tthis.visualizeDFS = this.visualizeDFS.bind(this);\n\t}\n\n\t// Init the grid\n\tcomponentDidMount() {\n\t\tlet grid = buildGrid();\n\t\tthis.setState({ grid: grid });\n\t}\n\n\tvisualizeBFS = async () => {\n\t\tlet frontier = [];\n\t\tlet cameFrom = {};\n\t\tlet current = null;\n\t\t// returns an array of valid neighbors\n\t\tconst getNeighbors = (node) => {\n\t\t\tlet neighbors = [];\n\t\t\t// check above\n\t\t\tget(this.state.grid, `[${node.row - 1}][${node.col}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row - 1}][${node.col}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row - 1}][${node.col}]`));\n\t\t\t// check below\n\t\t\tget(this.state.grid, `[${node.row + 1}][${node.col}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row + 1}][${node.col}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row + 1}][${node.col}]`));\n\t\t\t// check right\n\t\t\tget(this.state.grid, `[${node.row}][${node.col + 1}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row}][${node.col + 1}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row}][${node.col + 1}]`));\n\t\t\t// check left\n\t\t\tget(this.state.grid, `[${node.row}][${node.col - 1}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row}][${node.col - 1}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row}][${node.col - 1}]`));\n\t\t\t// return an array of neighbors\n\t\t\treturn neighbors;\n\t\t};\n\n\t\tconst sleep = (milliseconds) => {\n\t\t\treturn new Promise((resolve) => setTimeout(resolve, milliseconds));\n\t\t};\n\n\t\tlet foundEarly = false;\n\n\t\t// Breadth First Search\n\t\tlet start = this.state.grid[startNodeRow][startNodeCol];\n\t\tfrontier.push(start);\n\t\tcameFrom[start.id] = null;\n\t\tconst process = async () => {\n\t\t\tcurrent = frontier.shift();\n\t\t\tlet copyCur = current;\n\t\t\tcopyCur.isFrontierNode = false;\n\t\t\tlet copyGrid = [ ...this.state.grid ];\n\t\t\tcopyGrid[copyCur.row][copyCur.col] = copyCur;\n\t\t\tthis.setState({ copyGrid });\n\t\t\tfor (let node of getNeighbors(current)) {\n\t\t\t\tif (!cameFrom[node.id]) {\n\t\t\t\t\tlet copyNode = node;\n\t\t\t\t\tfrontier.push(node); //  put into frontier array\n\t\t\t\t\tcameFrom[node.id] = current; // visited[node] = true\n\t\t\t\t\tcopyNode.isFrontierNode = true;\n\t\t\t\t\tcopyNode.hasBeenVisited = true;\n\t\t\t\t\tlet copyGrid = [ ...this.state.grid ];\n\t\t\t\t\tcopyGrid[copyNode.row][copyNode.col] = copyNode;\n\t\t\t\t\tthis.setState({ copyGrid });\n\t\t\t\t\tif (copyNode.id === `row-${finishNodeRow}-col-${finishNodeCol}`) foundEarly = true; // early exit\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Run one interation per every 10 ms\n\t\twhile (frontier.length > 0 && !foundEarly) {\n\t\t\tprocess();\n\t\t\tawait sleep(0.5);\n\t\t}\n\t\t// draw path\n\t\tlet path = [];\n\t\tlet backtrackCurrent = this.state.grid[finishNodeRow][finishNodeCol];\n\t\twhile (backtrackCurrent && !isEqual(backtrackCurrent, this.state.grid[startNodeRow][startNodeCol])) {\n\t\t\tpath.push(backtrackCurrent);\n\t\t\tbacktrackCurrent = cameFrom[backtrackCurrent.id];\n\t\t\tif (!backtrackCurrent) {\n\t\t\t\tconsole.log('no path found');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tlet copyState = [ ...this.state.grid ];\n\t\twhile (path.length !== 0) {\n\t\t\tlet temp = path.pop();\n\t\t\tcopyState[temp.row][temp.col].isPath = true;\n\t\t}\n\n\t\tthis.setState({ copyState });\n\t};\n\n\tvisualizeDFS = async () => {\n\t\tlet frontier = [];\n\t\tlet cameFrom = {};\n\t\tlet current = null;\n\t\t// returns an array of valid neighbors\n\t\tconst getNeighbors = (node) => {\n\t\t\tlet neighbors = [];\n\t\t\t// check above\n\t\t\tget(this.state.grid, `[${node.row - 1}][${node.col}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row - 1}][${node.col}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row - 1}][${node.col}]`));\n\t\t\t// check below\n\t\t\tget(this.state.grid, `[${node.row + 1}][${node.col}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row + 1}][${node.col}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row + 1}][${node.col}]`));\n\t\t\t// check right\n\t\t\tget(this.state.grid, `[${node.row}][${node.col + 1}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row}][${node.col + 1}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row}][${node.col + 1}]`));\n\t\t\t// check left\n\t\t\tget(this.state.grid, `[${node.row}][${node.col - 1}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row}][${node.col - 1}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row}][${node.col - 1}]`));\n\t\t\t// return an array of neighbors\n\t\t\treturn neighbors;\n\t\t};\n\n\t\tconst sleep = (milliseconds) => {\n\t\t\treturn new Promise((resolve) => setTimeout(resolve, milliseconds));\n\t\t};\n\n\t\tlet foundEarly = false;\n\n\t\t// Depth First Search\n\t\tlet start = this.state.grid[startNodeRow][startNodeCol];\n\t\tfrontier.push(start);\n\t\tcameFrom[start.id] = null;\n\t\tconst process = async () => {\n\t\t\tcurrent = frontier.pop();\n\t\t\tlet copyCur = current;\n\t\t\tcopyCur.isFrontierNode = false;\n\t\t\tlet copyGrid = [ ...this.state.grid ];\n\t\t\tcopyGrid[copyCur.row][copyCur.col] = copyCur;\n\t\t\tthis.setState({ copyGrid });\n\t\t\tfor (let node of getNeighbors(current)) {\n\t\t\t\tif (!cameFrom[node.id]) {\n\t\t\t\t\tlet copyNode = node;\n\t\t\t\t\tfrontier.push(node); //  put into frontier array\n\t\t\t\t\tcameFrom[node.id] = current; // visited[node] = true\n\t\t\t\t\tcopyNode.isFrontierNode = true;\n\t\t\t\t\tcopyNode.hasBeenVisited = true;\n\t\t\t\t\tlet copyGrid = [ ...this.state.grid ];\n\t\t\t\t\tcopyGrid[copyNode.row][copyNode.col] = copyNode;\n\t\t\t\t\tthis.setState({ copyGrid });\n\t\t\t\t\tif (copyNode.id === `row-${finishNodeRow}-col-${finishNodeCol}`) foundEarly = true; // early exit\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Run one interation per every 10 ms\n\t\twhile (frontier.length > 0 && !foundEarly) {\n\t\t\tprocess();\n\t\t\tawait sleep(0.5);\n\t\t}\n\t\t// draw path\n\t\tlet path = [];\n\t\tlet backtrackCurrent = this.state.grid[finishNodeRow][finishNodeCol];\n\t\twhile (backtrackCurrent && !isEqual(backtrackCurrent, this.state.grid[startNodeRow][startNodeCol])) {\n\t\t\tpath.push(backtrackCurrent);\n\t\t\tbacktrackCurrent = cameFrom[backtrackCurrent.id];\n\t\t\tif (!backtrackCurrent) {\n\t\t\t\tconsole.log('no path found');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tlet copyState = [ ...this.state.grid ];\n\t\twhile (path.length !== 0) {\n\t\t\tlet temp = path.pop();\n\t\t\tcopyState[temp.row][temp.col].isPath = true;\n\t\t}\n\n\t\tthis.setState({ copyState });\n\t};\n\n\tvisualizeAstar = async () => {\n\t\tlet frontier = [];\n\t\tlet cameFrom = {};\n\t\tlet queue = {};\n\t\tlet current = null;\n\t\t// returns an array of valid neighbors\n\t\tconst getNeighbors = (node) => {\n\t\t\tlet neighbors = [];\n\t\t\t// check above\n\t\t\tget(this.state.grid, `[${node.row - 1}][${node.col}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row - 1}][${node.col}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row - 1}][${node.col}]`));\n\t\t\t// check below\n\t\t\tget(this.state.grid, `[${node.row + 1}][${node.col}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row + 1}][${node.col}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row + 1}][${node.col}]`));\n\t\t\t// check right\n\t\t\tget(this.state.grid, `[${node.row}][${node.col + 1}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row}][${node.col + 1}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row}][${node.col + 1}]`));\n\t\t\t// check left\n\t\t\tget(this.state.grid, `[${node.row}][${node.col - 1}]`) &&\n\t\t\t\t!get(this.state.grid, `[${node.row}][${node.col - 1}]`).isWall &&\n\t\t\t\tneighbors.push(get(this.state.grid, `[${node.row}][${node.col - 1}]`));\n\t\t\t// return an array of neighbors\n\t\t\treturn neighbors;\n\t\t};\n\n\t\tconst sleep = (milliseconds) => {\n\t\t\treturn new Promise((resolve) => setTimeout(resolve, milliseconds));\n\t\t};\n\n\t\tconst heuristic = (finish , cur) => {\n\t\t\tconsole.log({cur})\n\t\t\t// Manhattan distance on a square grid\n\t\t\treturn Math.abs(finish.row - cur.row) + Math.abs(finish.col - cur.col);\n\t\t};\n\n\n\t\tlet foundEarly = false;\n\n\t\t// A* star search\n\t\tlet start = this.state.grid[startNodeRow][startNodeCol];\n\t\tfrontier.push(start);\n\t\tcameFrom[start.id] = null;\n\t\tconst process = async () => {\n\t\t\tfrontier.sort((x, y) => x.value - y.value);\n\t\t\tcurrent = frontier.shift();\n\t\t\tlet copyCur = current;\n\t\t\tcopyCur.isFrontierNode = false;\n\t\t\tlet copyGrid = [ ...this.state.grid ];\n\t\t\tcopyGrid[copyCur.row][copyCur.col] = copyCur;\n\t\t\tthis.setState({ copyGrid });\n\t\t\tfor (let node of getNeighbors(current)) {\n\t\t\t\tif (!cameFrom[node.id]) {\n\t\t\t\t\t\tlet copyNode = node;\n\t\t\t\t\t\tfrontier.push(node); //  put into frontier array\n\t\t\t\t\t\tcameFrom[node.id] = current; // visited[node] = true\n\t\t\t\t\t\tcopyNode.isFrontierNode = true;\n\t\t\t\t\t\tcopyNode.hasBeenVisited = true;\n\t\t\t\t\t\tcopyNode.value = heuristic(this.state.grid[finishNodeRow][finishNodeCol], copyNode); // update value\n\t\t\t\t\t\tlet copyGrid = [ ...this.state.grid ];\n\t\t\t\t\t\tcopyGrid[copyNode.row][copyNode.col] = copyNode;\n\t\t\t\t\t\tthis.setState({ copyGrid });\n\t\t\t\t\t\tif (copyNode.id === `row-${finishNodeRow}-col-${finishNodeCol}`) foundEarly = true; // early exit\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Run one interation per every 10 ms\n\t\twhile (frontier.length > 0 && !foundEarly) {\n\t\t\tprocess();\n\t\t\tawait sleep(0.5);\n\t\t}\n\t\t// draw path\n\t\tlet path = [];\n\t\tlet backtrackCurrent = this.state.grid[finishNodeRow][finishNodeCol];\n\t\twhile (backtrackCurrent && !isEqual(backtrackCurrent, this.state.grid[startNodeRow][startNodeCol])) {\n\t\t\tpath.push(backtrackCurrent);\n\t\t\tbacktrackCurrent = cameFrom[backtrackCurrent.id];\n\t\t\tif (!backtrackCurrent) {\n\t\t\t\tconsole.log('no path found');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tlet copyState = [ ...this.state.grid ];\n\t\twhile (path.length !== 0) {\n\t\t\tlet temp = path.pop();\n\t\t\tcopyState[temp.row][temp.col].isPath = true;\n\t\t}\n\n\t\tthis.setState({ copyState });\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<br />\n\t\t\t\t{this.state.grid.map((row, idx) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div style={{ height: '2vw' }}>\n\t\t\t\t\t\t\t{row.map((cell, cellIdx) => {\n\t\t\t\t\t\t\t\tconst wall = randomWalls.find((wallCell) => {\n\t\t\t\t\t\t\t\t\treturn wallCell[0] === cell.row && wallCell[1] === cell.col;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<Node\n\t\t\t\t\t\t\t\t\t\tid={`row-${idx}-col-${cellIdx}`}\n\t\t\t\t\t\t\t\t\t\tisStartNode={cell.isStartNode}\n\t\t\t\t\t\t\t\t\t\tisFinishNode={cell.isFinishNode}\n\t\t\t\t\t\t\t\t\t\tisFrontierNode={cell.isFrontierNode}\n\t\t\t\t\t\t\t\t\t\thasBeenVisited={cell.hasBeenVisited}\n\t\t\t\t\t\t\t\t\t\tisWall={!!wall}\n\t\t\t\t\t\t\t\t\t\tisPath={cell.isPath}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t\t<br />\n\t\t\t\t<button className=\"button-xlarge pure-button\" style={{ margin: 10 }} onClick={this.visualizeBFS}>\n\t\t\t\t\tBFS\n\t\t\t\t</button>\n\t\t\t\t<button className=\"button-xlarge pure-button\" style={{ margin: 10 }} onClick={this.visualizeDFS}>\n\t\t\t\t\tDFS\n\t\t\t\t</button>\n\t\t\t\t<button className=\"button-xlarge pure-button\" style={{ margin: 10 }} onClick={this.visualizeAstar}>\n\t\t\t\t\tAStar\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Grid;\n\n// TODO - Put both into different files\n// Grid Utils\nconst buildGrid = () => {\n\tlet grid = [];\n\tfor (let row = 0; row < 15; row++) {\n\t\tlet currentRow = [];\n\t\tfor (let col = 0; col < 25; col++) {\n\t\t\tcurrentRow.push(nodeData(row, col));\n\t\t}\n\t\tgrid.push(currentRow);\n\t}\n\n\treturn grid;\n};\n\n// object representing a Node\nconst nodeData = (row, col) => {\n\tconst wall = randomWalls.find((x) => isEqual([ row, col ], x));\n\treturn {\n\t\tid: `row-${row}-col-${col}`,\n\t\trow: row,\n\t\tcol: col,\n\t\tisStartNode: row === startNodeRow && col === startNodeCol,\n\t\tisFinishNode: row === finishNodeRow && col === finishNodeCol,\n\t\tisFrontierNode: false,\n\t\tisWall: wall,\n\t\tisPath: false,\n\t\thasBeenVisited: false,\n\t\tvalue: row === startNodeRow && col === startNodeCol ? 0 : Infinity\n\t};\n};\n","import React from 'react';\nimport './App.css';\nimport Grid from './components/Grid';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<br />\n\t<div className=\"container\" style={{padding:'5vw', paddingTop:'1vh'}}>\n  <h1>PATH FINDING VISUALIZER</h1>\n\t\t\t<div className=\"pure-g\" style={{ margin: 10 }}>\n\t\t\t\t<div className=\"pure-u-1-6\">\n\t\t\t\t\t<p\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tborderRadius: 15,\n\t\t\t\t\t\t\tborder: 'white solid thick',\n\t\t\t\t\t\t\tcolor: 'white',\n\t\t\t\t\t\t\tpadding: 10,\n              fontWeight: 700,\n              fontSize:'1.5vw',\n\t\t\t\t\t\t\tbackground: '#5b58f5'\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tStart\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"pure-u-1-6\">\n\t\t\t\t\t<p\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tborderRadius: 15,\n\t\t\t\t\t\t\tborder: 'white solid thick',\n\t\t\t\t\t\t\tcolor: 'white',\n\t\t\t\t\t\t\tpadding: 10,\n              fontWeight: 700,\n              fontSize:'1.5vw',\n\t\t\t\t\t\t\tbackground: '#ff5757'\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tFinish\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"pure-u-1-6\">\n\t\t\t\t\t<p\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tborderRadius: 15,\n\t\t\t\t\t\t\tborder: 'white solid thick',\n\t\t\t\t\t\t\tcolor: 'white',\n\t\t\t\t\t\t\tpadding: 10,\n              fontWeight: 700,\n              fontSize:'1.5vw',\n\t\t\t\t\t\t\tbackground: '#6e6e6e'\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tWalls\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"pure-u-1-6\">\n\t\t\t\t\t<p\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tborderRadius: 15,\n\t\t\t\t\t\t\tborder: 'white solid thick',\n\t\t\t\t\t\t\tcolor: 'white',\n\t\t\t\t\t\t\tpadding: 10,\n              fontWeight: 700,\n              fontSize:'1.5vw',\n\t\t\t\t\t\t\tbackground: '#b5f558'\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tPath\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"pure-u-1-6\">\n\t\t\t\t\t<p\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tborderRadius: 15,\n\t\t\t\t\t\t\tborder: 'white solid thick',\n\t\t\t\t\t\t\tcolor: 'white',\n\t\t\t\t\t\t\tpadding: 10,\n              fontWeight: 700,\n              fontSize:'1.5vw',\n\t\t\t\t\t\t\tbackground: '#fcb6bf'\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tFrontier\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"pure-u-1-6\">\n\t\t\t\t\t<p\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tborderRadius: 15,\n\t\t\t\t\t\t\tborder: 'white solid thick',\n\t\t\t\t\t\t\tcolor: 'white',\n\t\t\t\t\t\t\tpadding: 10,\n              fontWeight: 700,\n              fontSize:'1.5vw',\n\t\t\t\t\t\t\tbackground: '#5592d9'\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tVisited\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<hr/>\n      <Grid />\n  </div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}